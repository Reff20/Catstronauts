{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/support/Documents/GraphQL Apollo/odyssey-lift-off-part1/client/src/pages/tracks.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Layout } from '../components';\nimport { useQuery, gql } from '@apollo/client';\nimport TrakCard from '../containers/track-card';\nconst TRACKS = gql`\n  query Query {\n  trackForHome {\n    id\n    title\n    author {\n      id\n      name\n      photo\n    }\n    thumbnail\n    length\n    modulesCount\n  }\n}\n`;\n\nconst Tracks = () => {\n  _s();\n\n  var _data$trackForHome;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TRACKS);\n  if (loading) return 'Loading...';\n  if (error) return `ERROR! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    grid: true,\n    children: data === null || data === void 0 ? void 0 : (_data$trackForHome = data.trackForHome) === null || _data$trackForHome === void 0 ? void 0 : _data$trackForHome.map(track => /*#__PURE__*/_jsxDEV(TrackCard, {\n      track: track\n    }, track.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Tracks, \"ATRudwUnWENk7lEGiyv3yjumjxE=\", false, function () {\n  return [useQuery];\n});\n\n_c = Tracks;\nexport default Tracks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"sources":["/home/support/Documents/GraphQL Apollo/odyssey-lift-off-part1/client/src/pages/tracks.js"],"names":["React","Layout","useQuery","gql","TrakCard","TRACKS","Tracks","loading","error","data","message","trackForHome","map","track","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,QAAP,MAAqB,0BAArB;AAEA,MAAMC,MAAM,GAAGF,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;;AAiBA,MAAMG,MAAM,GAAG,MAAM;AAAA;;AAAA;;AACnB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBP,QAAQ,CAACG,MAAD,CAAvC;AACA,MAAIE,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AACX,sBAAO,QAAC,MAAD;AAAQ,IAAA,IAAI,MAAZ;AAAA,cAAcD,IAAd,aAAcA,IAAd,6CAAcA,IAAI,CAAEE,YAApB,uDAAc,mBAAoBC,GAApB,CAAyBC,KAAD,iBAC3C,QAAC,SAAD;AAA0B,MAAA,KAAK,EAAEA;AAAjC,OAAgBA,KAAK,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,YADmB;AAAd;AAAA;AAAA;AAAA;AAAA,UAAP;AAGD,CAPD;;GAAMR,M;UAC2BJ,Q;;;KAD3BI,M;AASN,eAAeA,MAAf","sourcesContent":["import React from 'react';\nimport { Layout } from '../components';\nimport { useQuery, gql } from '@apollo/client';\nimport TrakCard from '../containers/track-card'\n\nconst TRACKS = gql`\n  query Query {\n  trackForHome {\n    id\n    title\n    author {\n      id\n      name\n      photo\n    }\n    thumbnail\n    length\n    modulesCount\n  }\n}\n`;\n\nconst Tracks = () => {\n  const {loading, error, data} = useQuery(TRACKS);\n  if (loading) return 'Loading...'\n  if (error) return `ERROR! ${error.message}`\n  return <Layout grid>{data?.trackForHome?.map((track)=>(\n    <TrackCard key={track.id} track={track} />\n  ))}</Layout>;\n};\n\nexport default Tracks;\n"]},"metadata":{},"sourceType":"module"}